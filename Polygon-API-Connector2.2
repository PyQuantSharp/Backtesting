import requests
import pandas as pd
import pytz
import time
import datetime
import concurrent.futures
import sqlite3
api = 'API HERE'
starttime = time.perf_counter()


#----- SQL --------
#Connect to database and create cursor
connect = sqlite3.connect("SRUSListedPolygon.db")
c = connect.cursor()


#------------- Function definition --------------
def tickerlistgenerator():
    storagelist = []
    status = 1
    totalpages = 1

    #Set URL for the initial request
    url = 'https://api.polygon.io/v3/reference/tickers?type=CS&market=stocks&active=true&sort=ticker&order=asc&limit=50000' + api

    response = requests.get(url)

    for item in response.json()['results']:
        storagelist.append(item['ticker'])


    print('total pages of ticker symbols: ', totalpages)
    return(storagelist)


def stockdownloader(stock, startdate, enddate):
    url = ('https://api.polygon.io/v2/aggs/ticker/%s/range/1/day/%s/%s?adjusted=true&sort=asc&limit=50000' % (
    stock, startdate, enddate)) + api

    storage = []
    status = 1
    totalpages = 1

    while status == 1:
        response = requests.get(url)

        try:
            # Run with threading - without map
            with concurrent.futures.ThreadPoolExecutor(max_workers=130) as executor:
                futures = []
                for item in response.json()['results']:
                    futures.append(executor.submit(innerfunction, response,stock,item) )

                for future in concurrent.futures.as_completed(futures):
                    storage.append(future.result())

        except:
            print("Error with stock:", stock)

        if "next_url" in response.json():
            print("next URL TRUE")
            url = response.json()['next_url'] + api
            totalpages += 1
        else:
            status = 0

    df = pd.DataFrame(storage).sort_values(by="date")
    print(df)

    #Storage

    # Store in database (SQLite)
    #pd.DataFrame.to_sql(df, "%s" % stock, connect, if_exists='replace', index=False)
    #print("data hentet uden problemer for aktien: %s" % stock)

    '''
    df.to_feather(
        r'C:\01 SR Data partition\Jottacloud\04 Programmering\04 Python Programmering\SRFeather\AAPLDaily.feather')

    newdf = pd.read_feather(
        r'C:\01 SR Data partition\Jottacloud\04 Programmering\04 Python Programmering\SRFeather\%s.feather' % stock)
    print(newdf.head())
    '''


def innerfunction(response, stock, item):

    date = datetime.datetime.fromtimestamp(item['t'] / 1000, tz=pytz.timezone('America/New_York')).date()

    ticker = response.json()['ticker']

    referenceResponse = requests.get('https://api.polygon.io/vX/reference/tickers/%s?date=%s' % (stock, date) + api)
    marketcap = referenceResponse.json()['results']['market_cap']
    outstanding = marketcap / item['c']

    json_element = {
        'date': date,
        'ticker': ticker,
        'open': item['o'],
        'high': item['h'],
        'low': item['l'],
        'close': item['c'],
        'marketcap': marketcap,
        'outstanding': outstanding}

    return (json_element)


#------- RUNNING FUNCTIONS -------

#Define test universe
tickerlist = tickerlistgenerator()

#Download data
for stock in tickerlist[0:10]:
    stockdownloader(stock, '2018-01-01', '2021-12-31')




#-------- Logging ----------
print("Total number of tickers is: ", len(tickerlist))
print("Downloaded data for # of tickers: ")
print("Number of stocks that failed: ")

#-------- Various prints -------------
print("Total runtime: ", time.perf_counter() - starttime)
